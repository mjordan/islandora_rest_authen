<?php

/**
 * @file
 * Module file.
 */

/**
 * Implements hook_menu().
 */
function islandora_rest_authen_menu() {
  $items = array();
  $items['admin/islandora/tools/rest_authen'] = array(
    'title' => 'Islandora REST Authen',
    'description' => 'Configure the Islandora REST Authen module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_rest_authen_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function islandora_rest_authen_init() {
  islandora_rest_authen_authenticate();
}

/**
 * Admin settings form builder.
 */
function islandora_rest_authen_admin_settings() {
  $form['islandora_rest_authen_users'] = array(
    '#type' => 'textarea',
    '#title' => t('REST users'),
    '#default_value' => variable_get('islandora_rest_authen_users', ''),
    '#description' => t('A list of REST username/key pairs, one per line. Separate usernames and keys with a colon. Each username/key pair must be included in a "X-Authorization-User" HTTP request header. If you want to restrict access to the REST interface to a specific IP address, add it to the end of the username/key string, separated from it by a pipe (`|`). Ranges are allowed in the format 111.111.111.111:222.222.222.222. Multiple addresses and ranges can be separated with a comma. If you want access to the REST interface to expire at a specific date, add it to the end of the userename/key/IP address string, separated from it by a pipe and in the ISO 8601 date format (e.g. 2017-03-06T19:23:48-08:00). See this module\'s README for examples.'),
  );
  $form['islandora_rest_authen_log_api_key_logins'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log API key authentication attempts'),
    '#default_value' => variable_get('islandora_rest_authen_log_api_key_logins', 1),
    '#description' => t('Log attempts (success and failure) at authenticating using an REST API key.'),
  );
  return system_settings_form($form);
}

/**
 * Authenticates the REST user.
 */
function islandora_rest_authen_authenticate() {
  if (preg_match('#^islandora/rest/#', current_path())) {
    $request_headers = getallheaders();
    if (isset($request_headers['X-Authorization-User'])) {
      list($rest_username, $rest_key) = explode(':', $request_headers['X-Authorization-User']);
      $authorized_users = preg_split("/\\r\\n|\\r|\\n/", variable_get('islandora_rest_authen_users', ''));
      foreach ($authorized_users as $authorized_user_details) {
        // Check for presence of IP whitelist.
        if (preg_match('/\|/', $authorized_user_details)) {
          list($rest_credentials, $rest_ip_whitelist) = explode('|', $authorized_user_details);
        }
        else {
          $rest_credentials = $authorized_user_details;
          $rest_ip_whitelist = '';
        }

        if ($rest_credentials == $request_headers['X-Authorization-User']) {
          // Check request's IP address against whitelist.
          if (strlen($rest_ip_whitelist)) {
            // If credentials match and IP address is OK, log user in.
            if (islandora_rest_authen_check_ip($rest_ip_whitelist)) {
              // Check API key's expiry date.
              if (!islandora_rest_authen_check_expiry($authorized_user_details)) {
                header('HTTP/1.0 401 Unauthorized', TRUE);
                exit;
              }
              islandora_rest_authen_log_in($rest_username);
            }
            else {
              // If credentials match but IP address is bad, do not log user in.
              if (variable_get('islandora_rest_authen_log_api_key_logins', 1)) {
                watchdog('islandora_rest_authen', "Login attempt using REST API key failed for user !user from disallowed IP address !ip_address.", array('!user' => $rest_username, '!ip_address' => ip_address()));
              }
              header('HTTP/1.0 401 Unauthorized', TRUE);
              exit;
            }
          }
          else {
            // Check API key's expiry date.
            if (!islandora_rest_authen_check_expiry($authorized_user_details)) {
              header('HTTP/1.0 401 Unauthorized', TRUE);
              exit;
            }
            // If credentials match and there is no IP whitelist, log user in.
            islandora_rest_authen_log_in($rest_username);
          }
        }
        else {
          // If credentials do not match, do not log user in.
          islandora_rest_authen_log_in($rest_username);
          if (variable_get('islandora_rest_authen_log_api_key_logins', 1)) {
            watchdog('islandora_rest_authen', "Login attempt using REST API key failed for user !user.", array('!user' => $rest_username));
          }
          header('HTTP/1.0 401 Unauthorized', TRUE);
        }
      }
    }
  }
}

/**
 * Logs in the REST user.
 *
 * @param string $username
 *   The user's username.
 */
function islandora_rest_authen_log_in($username) {
  $account = user_load_by_name($username);
  $form_state['uid'] = $account->uid;
  user_login_submit(array(), $form_state);
  if (variable_get('islandora_rest_authen_log_api_key_logins', 1)) {
    watchdog('islandora_rest_authen', "Login attempt using REST API key successful for user !user.", array('!user' => $username));
  }
}

/**
 * Compares the client's IP address against a list of allowed addresses.
 *
 * @param string $ip_ranges
 *   The string containing the IP ranges to check.
 *
 * @return bool
 *   TRUE if the client address is in the ranges, FALSE if not.
 */
function islandora_rest_authen_check_ip($ip_ranges) {
  if (!strlen($ip_ranges)) {
    return FALSE;
  }
  $is_allowed = FALSE;

  // Get client's IP address and convert it to a long integer for
  // comparison with the registered ranges.
  $comparable_address = ip2long(ip_address());

  $ranges = explode(',', $ip_ranges);
  foreach ($ranges as $range) {
    $range = preg_replace('/\s+/', '', $range);
    if (!strlen($range)) {
      continue;
    }
    list($low, $high) = array_pad(explode(':', $range, 2), 2, NULL);

    // Check ranges of IP addresses.
    if (!is_null($low) && !is_null($high)) {
      $comparable_low = ip2long($low);
      $comparable_high = ip2long($high);
      if ($comparable_address >= $comparable_low && $comparable_address <= $comparable_high) {
        $is_allowed = TRUE;
      }
    }

    // Check individual IP addresses.
    if (!is_null($low) && is_null($high)) {
      if (ip_address() == $low) {
        $is_allowed = TRUE;
      }
    }

  }
  return $is_allowed;
}

/**
 * Compares the API key's expiry date, if one is present.
 *
 * @param string $entry
 *   The authorized user entry.
 *
 * @return bool
 *   TRUE if the entry does not contain an expiry date or if the
 *   date is in the future; FALSE if the date is present and in
 *   the past.
 */
function islandora_rest_authen_check_expiry($entry) {
  $entry_parts = explode('|', $entry);
  list($username, $key) = explode(':', $entry_parts[0]);
  if (count($entry_parts) === 3) {
    $now = time();
    $expiry_date = $entry_parts[2];
    if (strtotime($expiry_date) > $now) {
      return TRUE;
    }
    else {
      if (variable_get('islandora_rest_authen_log_api_key_logins', 1)) {
        watchdog('islandora_rest_authen', "Login attempt using expired REST API key failed for user !user.", array('!user' => $username));
      }
      return FALSE;
    }
  }
  else {
    return TRUE;
  }
}
